# This is a GitHub action that does the following things:
#
# -- For MAIN branch (on _push_ events) --
#
# 1. Config authentication to Google Cloud
# 2. Set up Cloud SDK
# 3. Get access of a GCP instance using `gcloud ssh`
# 4. Clone a GitHub repository
# 5. Build the docker image
# 6. Run the container using the newly created docker image
# 7. Expose the newly created container to the defined port
#
# Note: GCP instance and VPC network need to be configured to allow HTTP(S) traffic
# on both the pre-defined port for exposing the container and the instance for getting
# access to it using the `gcloud compute ssh` command.
#
# Author: Dimitris G. Kargatzis (dimitris@warestack.io)
#
name: Build, Deploy and Expose
on:
  push:
    branches:
      - 'main'
  release:
    types: [created]

jobs:
  setup-build-publish-deploy:
    name: Setup, Build and Deploy
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_ZONE: ${{ secrets.GCP_ZONE }}
      INSTANCE_NAME: ${{ secrets.INSTANCE_NAME }}
      IMAGE_NAME: docker-image
      CONTAINER_NAME: docker-container
      GITHUB_REPO_URL: ${{ secrets.GITHUB_REPO_URL }}

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Config authentication to Google Cloud
      - id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TF_SA_CREDS_BASE64 }}

      # Set up Cloud SDK
      - id: gcloud-setup
        uses: google-github-actions/setup-gcloud@v0

      # Build the Docker image
      - name: Build and deploy to Compute engine
        id: build
        if:
        run: |-
          gcloud --quiet compute ssh ${{ env.INSTANCE_NAME }} --project=${{ env.PROJECT_ID }} --zone=${{ env.GCP_ZONE }} --command \
            'git clone ${{ env.GITHUB_REPO_URL }} app-dir && cd "$_" && sudo docker image build -t ${{ env.IMAGE_NAME }}:latest . && sudo docker container run -d --name ${{ env.CONTAINER_NAME }} --publish 80:9000 ${{ env.IMAGE_NAME }}:latest' 
